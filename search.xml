<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/08/27/docker/Docker%E4%B8%AD%E5%AE%89%E8%A3%85Tomcat/"/>
      <url>/2020/08/27/docker/Docker%E4%B8%AD%E5%AE%89%E8%A3%85Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker中安装Tomcat"><a href="#Docker中安装Tomcat" class="headerlink" title="Docker中安装Tomcat"></a>Docker中安装Tomcat</h1><h2 id="1、安装Tomcat"><a href="#1、安装Tomcat" class="headerlink" title="1、安装Tomcat"></a>1、安装Tomcat</h2><h4 id="1-1、拉取Tomcat"><a href="#1-1、拉取Tomcat" class="headerlink" title="1.1、拉取Tomcat"></a>1.1、拉取Tomcat</h4><p>最新版：<code>docker pull tomcat:latest</code></p><p>指定版本：<code>docker pull tomcat:指定版本号</code></p><h4 id="1-2、启动Tomcat"><a href="#1-2、启动Tomcat" class="headerlink" title="1.2、启动Tomcat"></a>1.2、启动Tomcat</h4><p><code>docker run -d --name tomcat -p 8080:8080 tomcat:版本号(最新版不需要)</code></p><h4 id="1-3、访问Tomcat"><a href="#1-3、访问Tomcat" class="headerlink" title="1.3、访问Tomcat"></a>1.3、访问Tomcat</h4><p>自己电脑浏览器访问：<code>http://host:8080</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意映射的端口是需要放行的   如果没放行  是访问不到的</span><br></pre></td></tr></table></figure><h2 id="2、Tomcat最新版-Tomcat-9-问题"><a href="#2、Tomcat最新版-Tomcat-9-问题" class="headerlink" title="2、Tomcat最新版(Tomcat 9)问题"></a>2、Tomcat最新版(Tomcat 9)问题</h2><p>在docker中拉取的最新版Tomcat会出现启动后访问不到   是因为在Tomcat9中webapps中没有ROOT等文件   它是当到了一个webapps.dist的文件夹中  我们需要这些文件移动过去</p><h4 id="2-1、进入Tomcat文件目录"><a href="#2-1、进入Tomcat文件目录" class="headerlink" title="2.1、进入Tomcat文件目录"></a>2.1、进入Tomcat文件目录</h4><p><code>docker exec -it tomcat bash</code></p><h4 id="2-2、删除webapps文件夹并且把webapps-dist文件夹改名"><a href="#2-2、删除webapps文件夹并且把webapps-dist文件夹改名" class="headerlink" title="2.2、删除webapps文件夹并且把webapps.dist文件夹改名"></a>2.2、删除webapps文件夹并且把webapps.dist文件夹改名</h4><p><code>rm -r webapps</code></p><p><code>mv webapps.dist/ webapps</code></p><h4 id="2-3、退出并重启"><a href="#2-3、退出并重启" class="headerlink" title="2.3、退出并重启"></a>2.3、退出并重启</h4><p>按住：<code>ctrl+p+q</code></p><p>重启：<code>docker restart 7c38e259f492(tomcat的容器Id)</code></p><p>然后再访问就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/27/docker/Docker%E4%B8%AD%E5%AE%89%E8%A3%85Redis/"/>
      <url>/2020/08/27/docker/Docker%E4%B8%AD%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker中安装Redis"><a href="#Docker中安装Redis" class="headerlink" title="Docker中安装Redis"></a>Docker中安装Redis</h1><h2 id="1、安装Redis"><a href="#1、安装Redis" class="headerlink" title="1、安装Redis"></a>1、安装Redis</h2><h4 id="1-1、拉取Redis"><a href="#1-1、拉取Redis" class="headerlink" title="1.1、拉取Redis"></a>1.1、拉取Redis</h4><p><code>docker pull redis:latest</code></p><h4 id="1-2、获取Redis配置文件"><a href="#1-2、获取Redis配置文件" class="headerlink" title="1.2、获取Redis配置文件"></a>1.2、获取Redis配置文件</h4><p>官网获取配置文件：<a href="http://download.redis.io/redis-stable/redis.conf">redis.conf</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改配置文件信息：</span><br><span class="line">bind 127.0.0.1 #注释掉这部分，这是限制redis只能本地访问</span><br><span class="line">protected-mode no #默认yes，开启保护模式，限制为本地访问</span><br><span class="line">daemonize no#默认no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程（可选），改为yes会使配置文件方式启动redis失败</span><br><span class="line">dir  .&#x2F; #输入本地redis数据库存放文件夹（可选）</span><br><span class="line">appendonly yes #redis持久化（可选）</span><br><span class="line">requirepass foobared #注释去掉  foobared就是redis的密码 （可选）</span><br></pre></td></tr></table></figure><p>然后把配置文件上传到服务器的文件夹  我的是<code>/usr/local/redis/</code></p><h4 id="1-3、启动redis"><a href="#1-3、启动redis" class="headerlink" title="1.3、启动redis"></a>1.3、启动redis</h4><p><code>docker run -d  --name redis -p 6379:6379 -v /usr/local/redis/redis.conf:/etc/redis/redis.conf -v /usr/local/data:/data redis redis-server /etc/redis/redis.conf --appendonly yes</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p 6379:6379 端口映射：前表示主机部分，：后表示容器部分。</span><br><span class="line">--name myredis  指定该容器名称，查看和进行操作都比较方便。</span><br><span class="line">-v 挂载目录，规则与端口映射相同。</span><br><span class="line">-d redis 表示后台启动redis</span><br><span class="line">redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录&#x2F;usr&#x2F;local&#x2F;docker&#x2F;redis.conf</span><br><span class="line">appendonly yes 开启redis 持久化</span><br></pre></td></tr></table></figure><h4 id="1-4、测试"><a href="#1-4、测试" class="headerlink" title="1.4、测试"></a>1.4、测试</h4><p>进入redis容器目录<code>docker exec -it redis bash</code></p><p>然后输入<code>redis-cli</code> 就可以使用了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/27/docker/Docker%E4%B8%AD%E5%AE%89%E8%A3%85Mysql/"/>
      <url>/2020/08/27/docker/Docker%E4%B8%AD%E5%AE%89%E8%A3%85Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker中安装Mysql"><a href="#Docker中安装Mysql" class="headerlink" title="Docker中安装Mysql"></a>Docker中安装Mysql</h1><h2 id="1、安装Mysql"><a href="#1、安装Mysql" class="headerlink" title="1、安装Mysql"></a>1、安装Mysql</h2><h4 id="1-1、拉取mysql镜像"><a href="#1-1、拉取mysql镜像" class="headerlink" title="1.1、拉取mysql镜像"></a>1.1、拉取mysql镜像</h4><p><code>docker pull mysql:latest</code></p><h4 id="1-2、启动Mysql容器"><a href="#1-2、启动Mysql容器" class="headerlink" title="1.2、启动Mysql容器"></a>1.2、启动Mysql容器</h4><p><code>docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></p><h4 id="1-3、进入容器目录测试"><a href="#1-3、进入容器目录测试" class="headerlink" title="1.3、进入容器目录测试"></a>1.3、进入容器目录测试</h4><p><code>docker exec -it mysql bash</code></p><p>进入<code>cd /usr/bin</code></p><p><code>mysql -uroot -p123456</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/27/docker/Docker/"/>
      <url>/2020/08/27/docker/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1、docker的安装"><a href="#1、docker的安装" class="headerlink" title="1、docker的安装"></a>1、docker的安装</h2><h4 id="1-1、安装工具"><a href="#1-1、安装工具" class="headerlink" title="1.1、安装工具"></a>1.1、安装工具</h4><p><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">device-mapper-persistent-data lvm2是干嘛的？</span><br><span class="line"></span><br><span class="line">docker要想数据存储就必须要安装这两个，这两个是为了docker做数据存储用的。</span><br></pre></td></tr></table></figure><h4 id="1-2、添加源为国内"><a href="#1-2、添加源为国内" class="headerlink" title="1.2、添加源为国内"></a>1.2、添加源为国内</h4><p><code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p><h4 id="1-3、更新安装Docker-CE"><a href="#1-3、更新安装Docker-CE" class="headerlink" title="1.3、更新安装Docker-CE"></a>1.3、更新安装Docker-CE</h4><p><code>sudo yum makecache fast</code><br><code>sudo yum -y install docker-ce</code></p><h4 id="1-4、启动验证"><a href="#1-4、启动验证" class="headerlink" title="1.4、启动验证"></a>1.4、启动验证</h4><p><code>sudo service docker start</code><br><code>docker version</code></p><h2 id="2、配置阿里镜像加速器"><a href="#2、配置阿里镜像加速器" class="headerlink" title="2、配置阿里镜像加速器"></a>2、配置阿里镜像加速器</h2><h4 id="2-1、去阿里搜索容器镜像服务"><a href="#2-1、去阿里搜索容器镜像服务" class="headerlink" title="2.1、去阿里搜索容器镜像服务"></a>2.1、去阿里搜索<code>容器镜像服务</code></h4><p><img src= "/img/loading.gif" data-lazy-src=".%5CDocker.assets%5Cimage-20200816150233760.png" alt="image-20200816150233760"></p><p><img src= "/img/loading.gif" data-lazy-src=".%5CDocker.assets%5Cimage-20200816150338205.png" alt="image-20200816150338205"></p><h4 id="2-2、执行命令"><a href="#2-2、执行命令" class="headerlink" title="2.2、执行命令"></a>2.2、执行命令</h4><p>按照上面的命令输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;k3rejc1u.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="3、镜像的安装"><a href="#3、镜像的安装" class="headerlink" title="3、镜像的安装"></a>3、镜像的安装</h2><h4 id="3-1、拉取镜像"><a href="#3-1、拉取镜像" class="headerlink" title="3.1、拉取镜像"></a>3.1、拉取镜像</h4><p><code>docker pull xxx</code>   例：<code>docker pull tomcat</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">完整命令是：docker pull 镜像名&lt;:tags&gt; 从远程仓库拉取镜像。如果没写:tags则代表是latest版本</span><br></pre></td></tr></table></figure><h4 id="3-2、查看镜像"><a href="#3-2、查看镜像" class="headerlink" title="3.2、查看镜像"></a>3.2、查看镜像</h4><p><code>docker images</code></p><h4 id="3-3、启动容器"><a href="#3-3、启动容器" class="headerlink" title="3.3、启动容器"></a>3.3、启动容器</h4><p><code>docker run xxx:版本号(最新版可省略)</code>   例：<code>docker run tomcat</code> <code>docker run tomcat:latest</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">完整命令是：docker run 镜像名&lt;:tags&gt; 这里没指定tag就代表是latest</span><br></pre></td></tr></table></figure><p><code>docker run -d --name xxx -p port1:port2 xxx</code>   例：<code>docker run -d --name tomcat1 -p 8080:8080 tomcat</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d：后台启动</span><br><span class="line">-p：端口映射</span><br><span class="line">--name：设置容器名称</span><br></pre></td></tr></table></figure><h4 id="3-4、查看容器信息"><a href="#3-4、查看容器信息" class="headerlink" title="3.4、查看容器信息"></a>3.4、查看容器信息</h4><p>查看启动的容器：<code>docker ps</code></p><p>查看所有容器：<code>docker ps -a</code></p><h4 id="3-4、删除容器"><a href="#3-4、删除容器" class="headerlink" title="3.4、删除容器"></a>3.4、删除容器</h4><p><code>docker rm xxx</code>   例：<code>docker rm 87f2b3a10855</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除需要用容器的ID  不能用名称</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src=".%5CDocker.assets%5Cimage-20200816153100668.png" alt="image-20200816153100668"></p><h4 id="3-5、进入容器里面"><a href="#3-5、进入容器里面" class="headerlink" title="3.5、进入容器里面"></a>3.5、进入容器里面</h4><p><code>docker exec-it xxx bash</code>   例：<code>docker exec -it tomcat bash</code>   <code>docker exec -it 87f2b3a10855 bash</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入容器可以使用名称和容器ID都可以进入</span><br></pre></td></tr></table></figure><p>退出：ctrl+p+q</p><h4 id="3-6、关闭-重启容器"><a href="#3-6、关闭-重启容器" class="headerlink" title="3.6、关闭/重启容器"></a>3.6、关闭/重启容器</h4><p>关闭：<code>docker stop xxx</code>   例：<code>docker stop 87f2b3a10855</code></p><p>重启：<code>docker restatr xxx</code>   例：<code>docker restatr 87f2b3a10855</code></p><h2 id="4、常用命令总结"><a href="#4、常用命令总结" class="headerlink" title="4、常用命令总结"></a>4、常用命令总结</h2><table><thead><tr><th align="center">解释</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">docker pull 镜像名&lt;:tags&gt;</td><td align="center">从远程仓库拉取镜像到本地仓库</td></tr><tr><td align="center">docker images</td><td align="center">查看本地仓库所有镜像</td></tr><tr><td align="center">docker run 镜像名&lt;:tags&gt;</td><td align="center">基于镜像创建容器并启动，可以添加-d port1:port2参数，port1：宿主机端口，port2：容器端口， -d参数代表后台运行</td></tr><tr><td align="center">docker ps</td><td align="center">查看当前所有启动的容器</td></tr><tr><td align="center">docker ps -a</td><td align="center">查看本地所有容器，包含未启动的，删除容器的时候可用来查询容器id</td></tr><tr><td align="center">docker start/stop/restart 容器id</td><td align="center">启动/停止/重启容器</td></tr><tr><td align="center">docker rm &lt;-f&gt; 容器id</td><td align="center">删除&lt;-f：强制删除&gt;容器，运行中的容器不能删除，-f可以强制</td></tr><tr><td align="center">docker rmi &lt;-f&gt; 镜像名称 &lt;:tags&gt;</td><td align="center">删除&lt;强制删除&gt;镜像，镜像有容器在启动，不能被删除，-f可以强制</td></tr><tr><td align="center">docker exec [-it] 容器id 命令</td><td align="center">进入容器主目录，exec：在对应容器中执行命令，-it：采用交互方式执行命令</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/26/hello-world/"/>
      <url>/2020/08/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
